:resize 60 or :resize +x or :res __ :vertical resize __ 
<C-W> + or - does split resiziing
:sh opens a new shell, exit to go back to vim.
append reg=> capital letter
default reg->0
:e $MYVIMRC -edits vimrc
:source $MYVIMRC - get updated vimrc without quitting. 
filename- "%p
:set guifont?
open multiple files:  :n, :prev (to navigate between them)
tabedit newfile
or
vim a.abc, b.abc
vim -p filenames opens tabs.
 switch with :tabn and :tabp, :tabe <filepath> adds a new file or switch with gt gT next prev, {i}gt for ith tab. tabclose to close. 
:wq save quit

:q! to not save quit

:n for nth line

:%s/searchfor/replacewith/every occurance on line?g or else no g
Movements {{{
h left			b for word

j down

k up

1851

l right 		w for word

G to bottom

gg to top 
% to go to other end of paranthesis
ctrl O for going to previous point, ctrl I for next
}}}
Insert{{{
i to insert
I for beginning of line insert
o to enter new line insert
O for upper line insert
}}}
yy to copy
"+yy to copy externally

p to paste(bottom)
"+p to paste external
shift p  to paste up

dd to delete

u to undo


{ block

N(number) + command =n times command


V to enter select mode(select multiple lines)

f(character) finds character there


>> indent

<< unindent

:N,$s/$/\r/ go to line N, add \n to all lines 
:g/./ norm o add spaces containing '.'(everything) for eg :g/[a-z]/norm o        :g! means not containing, diff between g and s is g is for commands, s for text.
visual select+ ':' gives that subset of lines
<C-letter> means ctrl+letter
<Esc>=esc
<Enter> or <CR>=enter

/ to search, n for next match, N for previous match
NUMBER+G=line
ctrl+g=show current file deets
matching brace is using % while on matching brace.

:!<external  command>

set ic-ignore case,   hls -highlight is:partial matches, prepend no to remove example set noic

GLOB FUNCTIONALITY(OPEN MULTIPLE FILES OF SAME TYPE) open vim, :args *.extension
bufdo=do for all buffers
:sp filename=split pane <c-w>+k,j to move up down between panes
:noh =no highlight till next search
"%p puts filename in vim

:find filename opens filename
:find *_part_of_file_name_* gives autocomplete options!!
:b _substring_ jumps directly if substring is unique, _substring_ tab gives options for non unique
<c-n> simple autocomplete
<c-x><c-f(files),c-

:tabedit filename opens file in new tab, gt for next tab, gT for previous tab.

=i{ indent in {

::Explore - VIM FILE EXPLORER!
Texplore:tabpage
Sexplore:horizontal

m{lowercase char} to set bookmarks.
:marks to access all marks.
`{uppercase char} goes to mark.

g~(m) toggle case
gU(m) upper case
gu(m) lower case
<C-A> adds 1 to number
view register contents- :reg shows all, :reg <key> shows for key.

:nnoremap <buffer> <leader>x dd <buffer> means only apply mapping for current buffer



"VIMSCRIPT from (Learn VS the hard way){{{
setlocal foldmethod=marker
"HeadingYouWant{{{
Use   za to fold/unfold after that.
"}}}
function names must be capital (can be capital if not in scope but don't do it since it's not a norm.
"Functions!{{{
:function DisplayName(name)
:  echom "Hello!  My name is:"
:  echom a:name
:endfunction
"a:" prefix must be attached to the functions arguments
Variable argument functions:
:function Varg(...)
:  echom a:0 stores the number of args
:  echom a:1 first arg
:  echo a:000 list of args, echo is used because list+echom!=success
:endfunction

:call Varg("a", "b")
"}}}
 Type conversion of strings to numbers(stoi) while adding and also number to string, use '.' for concat
echo is formatted string (with escape chars)
echom shows what vim sees( for ex \n turns to ^@)
single quotes string is raw string, and to use single quotes, use ''
eg ' This is it''s __' prints  This is it's __  

split join works as usual	

"}}}
"Tpope/surroundVim{{{
	surround(works with html/xml (even with<p class="asdf"> </p>is added) quite nicely as well!)
	add surroundingkeys - ys(motion)(object)(surroundWith) " '(' adds ( object ), ')' adds (object) i.e space or no space
	remove surrounding  - ds(surroundWith)	
	change surroudningkeys - cs(previous)(new surroundWith)
	add on line- yss(objects)
	visual mode- V, select, S (surroundWith)	
"}}}
"TPope/Commentary{{{
gc movement  
gcc for line
:g/Search/Commentary also works
"}}}
